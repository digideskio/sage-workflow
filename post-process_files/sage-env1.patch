From 55d157975c73952d5f5049740bd62ee7700abec3 Mon Sep 17 00:00:00 2001
From: "R. Andrew Ohana" <andrew.ohana@gmail.com>
Date: Wed, 27 Feb 2013 22:34:35 -0800
Subject: [PATCH] (FIXUP) make sage-env and basic startup not depend on the
 spkg directory

---

diff --git a/sage b/sage
index 0a085c4..a08eb43 100755
--- a/sage
+++ b/sage
@@ -120,11 +120,10 @@ fi
 export SAGE_ROOT
 
 # Run the actual Sage script
-if [ -x "$SAGE_ROOT/spkg/bin/sage" ]; then
-    "$SAGE_ROOT/spkg/bin/sage" "$@"
-elif [ -x "$SAGE_ROOT/local/bin/sage-sage" ]; then   # Support sage-4.x
-    export CUR=`pwd`
-    "$SAGE_ROOT/local/bin/sage-sage" "$@"
+if [ -x "$SAGE_ROOT/local/bin/sage" ]; then
+    "$SAGE_ROOT/local/bin/sage" "$@"
+elif [ -x "$SAGE_ROOT/__SAGE_SCRIPTS_DIR__/sage" ]; then   # For errors pre-installation
+    "$SAGE_ROOT/__SAGE_SCRIPTS_DIR__/sage" "$@"
 else
     echo >&2 "$0: no Sage installation found in \$SAGE_ROOT=$SAGE_ROOT"
     exit 1
diff --git a/__SAGE_SCRIPTS_DIR__/sage b/__SAGE_SCRIPTS_DIR__/sage
index 961ae78..d1e6759 100755
--- a/__SAGE_SCRIPTS_DIR__/sage
+++ b/__SAGE_SCRIPTS_DIR__/sage
@@ -248,7 +248,7 @@ if [ "$1" = '--nodotsage' ]; then
 fi
 
 # Make sure this doesn't produce output (in case we use this in scripts).
-. "$SAGE_ROOT/spkg/bin/sage-env" >&2
+. "$0-env" >&2
 if [ $? -ne 0 ]; then
     echo >&2 "Error setting environment variables by sourcing '$SAGE_ROOT/spkg/bin/sage-env';"
     echo >&2 "possibly contact sage-devel (see http://groups.google.com/group/sage-devel)."
diff --git a/__SAGE_SCRIPTS_DIR__/sage-env b/__SAGE_SCRIPTS_DIR__/sage-env
index 4b37e9e..349891c 100644
--- a/__SAGE_SCRIPTS_DIR__/sage-env
+++ b/__SAGE_SCRIPTS_DIR__/sage-env
@@ -7,7 +7,7 @@
 #  NOTES:
 #  - You must *source* this script instead of executing.
 #  - Use "return" instead of "exit" to signal a failure.  Since this
-#    file is sourced, an "exit" here will actually exit spkg/bin/sage,
+#    file is sourced, an "exit" here will actually exit __SAGE_SCRIPTS_DIR__/sage,
 #    which is probably not intended.
 #  - All environment variables set here should be *exported*, otherwise
 #    they won't be available in child programs.
@@ -17,7 +17,7 @@
 #  If you want to set all environment variables for your shell like
 #  they are during the build of Sage packages, type
 #
-#             . spkg/bin/sage-env
+#             . __SAGE_SCRIPTS_DIR__/sage-env
 #
 #  from the SAGE_ROOT directory.
 #
@@ -111,9 +111,9 @@ resolvelinks() {
 # or a guessed value based on pwd.
 if [ -n "$SAGE_ROOT" ]; then
     NEW_SAGE_ROOT="$SAGE_ROOT"
-elif [ -f sage -a -d spkg ]; then
+elif [ -f sage -a -d __SAGE_BUILD__ ]; then
     NEW_SAGE_ROOT="."
-elif [ -f ../../sage -a -d ../../spkg ]; then
+elif [ -f ../../sage -a -d ../../__SAGE_BUILD__ ]; then
     NEW_SAGE_ROOT="../.."
 else
     # No idea what SAGE_ROOT should be...
@@ -126,7 +126,7 @@ fi
 NEW_SAGE_ROOT=`cd "$NEW_SAGE_ROOT" && pwd -P`
 
 # Sanity check NEW_SAGE_ROOT
-if [ -f "$NEW_SAGE_ROOT/sage" -a -d "$NEW_SAGE_ROOT/spkg" ]; then
+if [ -f "$NEW_SAGE_ROOT/sage" -a -d "$NEW_SAGE_ROOT/__SAGE_BUILD__" ]; then
     :
 else
     echo >&2 "Error: SAGE_ROOT is set to a bad value:"
@@ -151,7 +151,7 @@ fi
 # "version number" of sage-env.  If a different version of sage-env was
 # sourced earlier (when upgrading), we still source the new version.
 # The sage-env version should be increased whenever a newer sage-env is
-# required for upgrading.  Note that spkg/standard/deps might also need
+# required for upgrading.  Note that __SAGE_BUILD__/deps might also need
 # to be changed: the packages which need the new sage-env must depend on
 # SAGE_ROOT_REPO (the root repo contains sage-env).
 #
@@ -168,6 +168,28 @@ export SAGE_ENV_SOURCED=$SAGE_ENV_VERSION
 
 export SAGE_ROOT="$NEW_SAGE_ROOT"
 
+# sage-env must know where the Sage's script files are
+if [ -z "$SAGE_SCRIPTS_DIR" ]; then
+    if [ -f "`dirname $0`/sage-env" ]; then
+        SAGE_SCRIPTS_DIR=`dirname $0`
+    elif [ -f "$SAGE_ROOT/local/bin/sage-env" ]; then
+        SAGE_SCRIPTS_DIR="$SAGE_ROOT/local/bin"
+    elif [ -f "$SAGE_ROOT/__SAGE_SCRIPTS_DIR__/sage-env" ]; then
+        SAGE_SCRIPTS_DIR="$SAGE_ROOT/__SAGE_SCRIPTS_DIR__"
+    else
+        echo >&2 "Error: You must set the SAGE_SCRIPTS_DIR environment variable to run this"
+        return 1
+    fi
+elif [ ! -f "$SAGE_SCRIPTS_DIR/sage-env" ]; then
+    echo >&2 "Error: SAGE_SCRIPTS_DIR is set to a bad value:"
+    echo >&2 "SAGE_SCRIPTS_DIR=$SAGE_SCRIPTS_DIR"
+    echo >&2 "You must correct it or erase it and rerun this script"
+    return 1
+fi
+
+# Make SAGE_SCRIPTS_DIR absolute
+export SAGE_SCRIPTS_DIR="`cd "$SAGE_SCRIPTS_DIR" && pwd -P`"
+
 # Call with: contains_spaces X${VAR}X
 # i.e., WITHOUT quotes but some character(s) around the environment variable to test.
 # (This function does return false for empty/unset variables.)
@@ -218,11 +240,11 @@ fi
 export SAGE_LOCAL="$SAGE_ROOT/local"
 export SAGE_SHARE="$SAGE_LOCAL/share"
 export SAGE_EXTCODE="$SAGE_SHARE/sage/ext"
-export SAGE_PACKAGES="$SAGE_ROOT/spkg"
-export SAGE_SPKG_INST="$SAGE_ROOT/spkg/installed"
-export SAGE_LOGS="$SAGE_ROOT/spkg/logs"
-export SAGE_DOC="$SAGE_ROOT/devel/sage/doc"
-export PATH="$SAGE_PACKAGES/bin:$SAGE_LOCAL/bin:$PATH"
+export SAGE_SPKG_INST="__SAGE_INSTALLED__"
+export SAGE_LOGS="$SAGE_ROOT/__SAGE_LOGS_DIR__"
+export SAGE_SRC="$SAGE_ROOT/__SAGE_SRC__"
+export SAGE_DOC="$SAGE_SRC/doc"
+export PATH="$SAGE_SRC/__SAGE_SCRIPTS_REL__:$SAGE_LOCAL/bin:$PATH"
 
 # this is to be compatible with optional packages that haven't
 # been updated to not use SAGE_DATA
@@ -273,7 +295,7 @@ HGENCODING="utf8" && export HGENCODING
 
 # Make Mercurial not use any user defaults (like enabling the pager extension)
 # This is needed in order to use mercurial in scripts.  When running hg
-# directly through "sage -hg", we will disable HGPLAIN in spkg/bin/sage.
+# directly through "sage -hg", we will disable HGPLAIN in __SAGE_SCRIPTS_DIR__/sage.
 # See Trac Ticket #12058
 HGPLAIN="yes" && export HGPLAIN
 
@@ -297,7 +319,7 @@ fi
 
 if [ "$DOT_SAGE" = "" ]; then
     # It is *not* an error if this directory does not exist, it will
-    # be created in spkg/bin/sage or devel/sage/sage/misc/misc.py.
+    # be created in __SAGE_SCRIPTS_DIR__/sage or __SAGE_SRC__/sage/misc/misc.py.
     # This also works if $HOME/.sage is a symbolic link to a
     # non-existing directory.
     DOT_SAGE=`resolvelinks "$HOME/.sage"`
@@ -413,7 +435,7 @@ export PKG_CONFIG_PATH
 # Whenever a flag like SAGE64 has been set once, it needs to be
 # restored in every run of sage, as mixing 64-bit and 32-bit code is
 # bad idea at best.  This script takes care of that.
-. "$SAGE_ROOT/spkg/bin/sage-arch-env"
+. "$SAGE_SCRIPTS_DIR/sage-arch-env"
 
 ############ compilation flags
 
-- 
1.8.1.5

